#!/bin/bash

### To lauch the script automatically type this command: sudo curl https://raw.githubusercontent.com/EdwardTeach1/PublicScripts/master/AutoArchInstall | sudo bash

######################################## START OF SCRIPT ########################################

#################### Section 1.0 (Collection of data) ####################
HOSTNAME="ViperLaptop"			### Sets Default Menu Option and configuration for the Hostname
A_USERNAME_1="Administrator"		### Sets Default Menu Option and configuration for the Admin Account Username
A_USERPASSWORD_1="Password1"		### Sets Default Menu Option and configuration for the Admin Account Password
ROOTPASSWORD="Password1"		### Sets Default Menu Option and configuration for the Root Password
LUKSPASSPHRASE="1234567890"		### Sets Default Menu Option and configuration for the LUKS Harddrive Encryption PassPhrase
CLASSIFICATION="CLASS1"			### Sets Default Menu Option and configuration for the System Classification

### Menu Options Status to Display when Ready
OPTION1STATUS="  READY  " ; OPTION2STATUS="  READY  " ; OPTION3STATUS="  READY  " ; OPTION4STATUS="  READY  " ; OPTION5STATUS="  READY  "
OPTION6STATUS="  READY  " ; OPTION7STATUS="  READY  " ; OPTION8STATUS="  READY  " ; OPTION9STATUS="  READY  " ; OPTION10STATUS="  READY  "
STARTSTATUS="READY TO INSTALL"

### Setup of Counters for menu to compute when ready to proceed with the Installation
OPTION1COUNTER=1 ; OPTION2COUNTER=1 ; OPTION3COUNTER=1 ; OPTION4COUNTER=1 ; OPTION5COUNTER=1
OPTION6COUNTER=1 ; OPTION7COUNTER=1 ; OPTION8COUNTER=1 ; OPTION9COUNTER=1 ; OPTION10COUNTER=1
START=$((OPTION1COUNTER+OPTION2COUNTER+OPTION3COUNTER+OPTION4COUNTER+OPTION5COUNTER+OPTION6COUNTER))

### Pre-Installation Menu
while [ $START -lt 100 ]	### Menu Displays while Counters until Installation start is selected
do
START=$((OPTION1COUNTER+OPTION2COUNTER+OPTION3COUNTER+OPTION4COUNTER+OPTION5COUNTER+OPTION6COUNTER))	### Calculation of Menu Status
if [ $START -lt 6 ]
then	STARTSTATUS="   NOT READY    "
else	STARTSTATUS="READY TO INSTALL"
fi
clear
echo "
                                .--'    ..............             '.............'             '..............     ....''
                             '+dmMMd   'hdmmmmmmmmmmmh             .dmmmmmmmmmmmmo             .dmmmmmmmmmmmms   :dm:.:yh
                            +ms.hMMd   'hmmmmmmmmmmmmh             .dmmmmmmmmmmmmo             .dmdmmmmmmmmmms   :mMmhs+/
                           hMhoomMMmo/ 'hmmdmmmmmmmmmy             .dmmdmmmmmmmmmo             .dmdmmmdddmmmms   o-'-/sNM:
                           ''''/dNNm:' 'hmmmhyyyyyyyys.............-yyhdddmmmdmdh+.............-yhhhhhhdddmmms   syo//+h+'
                                    ````   'hmmd+//////////////////////////hmmmmmmdd+/////////////////////odddmmms
                                       'hmmd+//////////////////////////hddmmmmdy//////////////////////odddmmms
                                       'hmmd+//////yhy''''.://////////odmmmmmmd+//////:........-yyyyyyhdddmmms
                              '-/++/'  'hmmd+//////dmy  '-//////////+yddmmmmmds///////.        .dmdmmdddmmmmms
                           '+dNd/.     'hmmd+//////dmy'.//////////::ddmmmmmmdh///////:--::::::::syhdmmmmmmmmms   .+o//+o/'
                           hMMMoshmho' 'hmmdyyyyyyyddy://///////:. .dmdmmmdmdo/////////////////////+ohddmmmmms  oNN-   +MN:
                           hMMy   NMM+ 'hmmdmmmmmmdh+/////////:.   .dmdmmmdmy///////::-.....-:////////+hmmmmms 'mMN    -MMs
                           '+ydsoydy/  'hmmmmmdmdho/////////:.     .ddddmdmmdddhh+.'          ':////////hmmmms  -hN+''.hNs'
                                       'hmdmddmds/////////:.'  ':://+++dmdmmmmmmdo             '////////smmmms    ':+mNh.'
                                       'hmdmdds/////////:-'    '///////dmmddhhhhh+..           .////////ydmmms       ./+/:'
                                       'hmddy+/////////-'''''''.///////hmmdh////////-'        .:///////odmmmms
                                       'hmdo///////////////////////////hdmmdh+////////:--..--:///////+ydmmmmms
                            ./+ooo+-'  'hmdo///////////////////////////hddmmmdyo+//////////////////oydmmmmmmms '...'   ....'
                           oNM+''dMMh  'hmdsooooooooo+::::::::::::::ooohmdmmmddmdo.---:::::::---yddmmdmmmmmmms ':mNNo. -yy-'
                           '-:./hMNs.  'hmdmmmdddddddy             .dmmmmmmmmmmmmo             .dmmmmmmmmmmmms   h:oNNo.+o
                           '/yNNy/'.:' 'hmmmmmmmmmmmmy             .dmmmmmmmmmmmmo             .dmmmmmmmmmmmms   h- 'oNNdo
                           shhhyyyyhy' 'oyyyyyyyyyyyyo             .syyyyyyyyyyyy/             'syyyyyyyyyyyy+ .:yo-  '+h/
"
echo " "

if [ -z "$HOSTNAME" ]					### If Hostname variable has no input sets counter to zero and display Not Ready status
then	OPTION1COUNTER=0 ; OPTION1STATUS="NOT READY"
fi
if [ -z "$A_USERNAME_1" ]				### If Admin Account Username variable has no input sets counter to zero and display Not Ready status
then	OPTION2COUNTER=0 ; OPTION2STATUS="NOT READY"
fi
if [ -z "$A_USERPASSWORD_1" ]				### If Admin Account Password variable has no input sets counter to zero and display Not Ready status
then	OPTION3COUNTER=0 ; OPTION3STATUS="NOT READY"
fi
if [ -z "$ROOTPASSWORD" ]				### If Root Password variable has no input sets counter to zero and display Not Ready status
then	OPTION4COUNTER=0 ; OPTION4STATUS="NOT READY"
fi
if [ -z "$LUKSPASSPHRASE" ]				### If LUKS Harddrive Encryption PassPhrase variable has no input sets counter to zero and display Not Ready status
then	OPTION5COUNTER=0 ; OPTION5STATUS="NOT READY"
fi
if [ -z "$CLASSIFICATION" ]				### If Classification variable has no input sets counter to zero and display Not Ready status
then	OPTION6COUNTER=0 ; OPTION6STATUS="NOT READY"
fi
echo	'						    Welcome to the 462SQN Arch Installation Script.'		### Pre-Installation Menu Display
echo	" "
echo	"Configure the following options before starting the Installation"
echo	" "
echo	" 1 - Configure a Hostname for this Installation. Default = ViperLaptop ------------------- [ $OPTION1STATUS ] ---------- : $HOSTNAME "
echo	" 2 - Configure an Administrative Account Username. Default Username = Administrator ------ [ $OPTION2STATUS ] ---------- : $A_USERNAME_1 "
echo	" 3 - Configure the Adminstrative Account Password. Default Password = Password1 ---------- [ $OPTION3STATUS ] ---------- : $A_USERPASSWORD_1 "
echo	" 4 - Set the Root Password. Default = Password1 ------------------------------------------ [ $OPTION4STATUS ] ---------- : $ROOTPASSWORD"
echo	" 5 - Set PassPhrase for LVM Drive Encryption. Default = 1234567890 ----------------------- [ $OPTION5STATUS ] ---------- : $LUKSPASSPHRASE "
echo	" 6 - Select the Classification of the system. Default = CLASS1 --------------------------- [ $OPTION6STATUS ] ---------- : $CLASSIFICATION "
echo	" 9 - START the Installation. Type the number 9 to begin the Installation. ----------------------------------------- [ $STARTSTATUS ]"
echo	" "
echo	"Select a number option and press Enter to continue "
echo	" "

read selection

case	$selection in

	1) read -p 'Enter a new Hostname: ' HOSTNAME ;
	if [ -z "$HOSTNAME" ]
		then	OPTION1STATUS="NOT_READY" ; OPTION1COUNTER=0
		else	OPTION1STATUS="  READY  " ; OPTION1COUNTER=1
	fi ;;

	2) read -p 'Enter a Username: ' A_USERNAME_1 ;
	if [ -z "$A_USERNAME_1" ]
		then	OPTION2STATUS="NOT_READY" ; OPTION2COUNTER=0
		else	OPTION2STATUS="  READY  " ; OPTION2COUNTER=1
	fi ;;

	3) read -p 'Enter a Password: ' A_USERPASSWORD_1 ;
	if [ -z "$A_USERPASSWORD_1" ]
		then	OPTION3STATUS="NOT_READY" ; OPTION3COUNTER=0
		else	OPTION3STATUS="  READY  " ; OPTION3COUNTER=1
	fi ;;

	4) read -p 'Enter a Root Password: ' ROOTPASSWORD ;
	if [ -z "$ROOTPASSWORD" ]
		then	OPTION4STATUS="NOT_READY" ; OPTION4COUNTER=0
		else	OPTION4STATUS="  READY  " ; OPTION4COUNTER=1
	fi ;;

	5) read -p 'Enter a LUKS Drive Encryption PassPhrase: ' LUKSPASSPHRASE ;
	if [ -z "$LUKSPASSPHRASE" ]
		then	OPTION5STATUS="NOT_READY" ; OPTION5COUNTER=0
		else	OPTION5STATUS="  READY  " ; OPTION5COUNTER=1
	fi ;;

	6) CLASSCOUNTER=0
  while [ $CLASSCOUNTER -eq 0 ]
  do
  clear
  echo	" "
  echo  "1 - CLASS1"
  echo  "2 - CLASS2"
  echo  " "
  echo	"Select a Classification and press Enter to continue "
  echo	" "
  read  CLASSIFICATION
  case	$CLASSIFICATION in
    1) CLASSIFICATION=CLASS1 ; CLASSCOUNTER=1 ;;
    2) CLASSIFICATION=CLASS2 ; CLASSCOUNTER=1 ;;
    esac
    done
	if [ -z "$CLASSIFICATION" ]
		then	OPTION6STATUS="NOT_READY" ; OPTION6COUNTER=0
		else	OPTION6STATUS="  READY  " ; OPTION6COUNTER=1
	fi ;;

	9) if	[ $START -eq 6 ]
		then
			echo " "
			read -p "WARNING: This script will wipe all data from the Harddrive /dev/sda. Proceed with the Installation? [Y/n] " InstallStart
			if      [ "${InstallStart,,}" = "yes" ] || [ "${InstallStart,,}" = "y" ] || [ "${InstallStart,,}" = "" ]
				then    echo "Installing Arch Linux !!!" ; sleep 2s
				else    exit ; echo "Installation Aborted !!!" ; sleep 2s ; clear
			fi
		sleep 2s ; START=100
		else	echo 'Complete All Options before proceding !!! ' ; sleep 2s
	   fi ;;
esac
done

#################### Section 2.0 (Delete Hard Drive Partitions) ####################

dd if=/dev/zero of=/dev/sda bs=512 count=1 conv=notrunc		### Delete current Partitions
SECTION2VAR1=$(lsblk /dev/sda | grep part)				### Sets harddrive partitions as condition variable
if	[ -z "$SECTION2VAR1" ]						### If condition variable is blank then partitions have been deleted
then
	echo " " ; echo "Section 2.0: Harddrive partitions have been deleted successfully" ; echo " "
else
	clear ; echo " " ; echo "Error detected at section 2 - Command 1" ; exit
fi

#################### Section 3.0 (Configure Repository Locations - HTTPS priority) ####################

sed -i "s/#Color/Color/" /etc/pacman.conf				### Activates Colours in Script
SECTION3VAR1=$(grep "#Color" /etc/pacman.conf)			### Searches for De-Activated Colour setting and sets condition variable
if	[ -z "$SECTION3VAR1" ]						### If condition variable is blank then Colour settings has been changed
then
	echo " " ; echo "Bash Colours have been set successfully" ; echo " " 
else
	clear ; echo " " ; echo "Section 3.0: Error detected at section 3 - Command 1" ; exit
fi

SECTION3VAR2=$(grep "ILoveCandy" /etc/pacman.conf)
if	[ ! -z "$SECTION3VAR2" ]
then
	echo " " ; echo "PACMAN mode has been enabled already" ; echo " " ; 
else
	sed -i '/^#VerbosePkgLists/a ILoveCandy' /etc/pacman.conf
	SECTION3VAR2=$(grep "ILoveCandy" /etc/pacman.conf)
	if	[ -z "$SECTION3VAR2" ]
	then
		clear ; echo " " ; echo "Section 3.0: Error detected at section 3 - Command 2" ; exit
	else
		echo " " ; echo "PACMAN mode has been enabled successfully" ; echo " "
	fi
fi

SECTION3VAR3=$(grep "##Server" /etc/pacman.d/mirrorlist)
if	[ ! -z "$SECTION3VAR3" ]
then
	echo " " ; echo "PACMAN mode has been enabled already" ; echo " "
else
	sed -i "s/Server/##Server/g" /etc/pacman.d/mirrorlist ; sed -i '/## Australia/{n;s/##Server/Server/}' /etc/pacman.d/mirrorlist
	SECTION3VAR3=$(grep "##Server" /etc/pacman.d/mirrorlist)
	if	[ -z "$SECTION3VAR3" ]
	then
		clear ; echo " " ; echo "Section 3.0: Error detected at section 3 - Command 3" ; exit
	else
		echo " " ; echo "PACMAN mode has been enabled already" ; echo " "
	fi
fi

SECTION3VAR4=$(grep -o 'https://mirror.aarnet.edu.au/pub/archlinux/$repo/os/$arch' /etc/pacman.d/mirrorlist)
if	[ ! -z "$SECTION3VAR4" ]
then
	echo " " ; echo "First HTTPS Server has been added to the mirrorlist file already" ; echo " "
else
	sed -i '/## Generated on/a Server = https://mirror.aarnet.edu.au/pub/archlinux/$repo/os/$arch' /etc/pacman.d/mirrorlist
	SECTION3VAR4=$(grep -o 'https://mirror.aarnet.edu.au/pub/archlinux/$repo/os/$arch' /etc/pacman.d/mirrorlist)
	if	[ -z "$SECTION3VAR4" ]
	then
		clear ; echo " " ; echo "Section 3.0: Error detected at section 3 - Command 4" ; exit
	else
		echo " " ; echo "First HTTPS Server has been added to the mirrorlist file already" ; echo " "
	fi
fi

SECTION3VAR5=$(grep 'https://archlinux.mirror.digitalpacific.com.au/$repo/os/$arch' /etc/pacman.d/mirrorlist)
if	[ ! -z "$SECTION3VAR5" ]
then
	echo " " ; echo "Second HTTPS Server has been added to the mirrorlist file successfully" ; echo " "
else
	sed -i '/## Generated on/a Server = https://archlinux.mirror.digitalpacific.com.au/$repo/os/$arch' /etc/pacman.d/mirrorlist
	SECTION3VAR5=$(grep 'https://archlinux.mirror.digitalpacific.com.au/$repo/os/$arch' /etc/pacman.d/mirrorlist)
	if	[ -z "$SECTION3VAR5" ]
	then
		clear ; echo " " ; echo "Section 3.0: Error detected at section 3 - Command 5" ; exit
	else
		echo " " ; echo "Second HTTPS Server has been added to the mirrorlist file successfully" ; echo " "
	fi
fi

SECTION3VAR6=$(grep -o 'https://syd.mirror.rackspace.com/archlinux/$repo/os/$arch' /etc/pacman.d/mirrorlist)
if	[ ! -z "$SECTION3VAR6" ]
then
	echo " " ; echo "Third HTTPS Server has been added to the mirrorlist file successfully" ; echo " "
else
	sed -i '/## Generated on/a Server = https://syd.mirror.rackspace.com/archlinux/$repo/os/$arch' /etc/pacman.d/mirrorlist
	SECTION3VAR6=$(grep -o 'https://syd.mirror.rackspace.com/archlinux/$repo/os/$arch' /etc/pacman.d/mirrorlist)
	if	[ -z "$SECTION3VAR6" ]
	then
		clear ; echo " " ; echo "Section 3.0: Error detected at section 3 - Command 6" ; exit
	else
		echo " " ; echo "Third HTTPS Server has been added to the mirrorlist file successfully" ; echo " "
	fi
fi

#################### Section 4.0 (Download Latest Arch Linux Packages) ####################

printf '\n\n\n' | pacman -Syyy which
echo " "
echo "Latest Arch Linux Packages have been downloaded successfully "
echo " "
sleep 2s

#################### Section 5.0 (Install Expect Shell) ####################

printf '\n\n\n' | pacman -S expect
SECTION5VAR1=$(which expect | grep -o "expect")
if	[ ! -z "$SECTION5VAR1" ]
then
	echo " " ; echo "Expect Shell has been installed successfully" ; echo " " 
else
	clear ; echo " " ; echo "Section 5.0: Error detected at section 5 - Command 1" ; exit
fi
sleep 2s

#################### Section 6.0 (Setup HDD Partitions for Installation) ####################

### First Classification Option
if		[ "$CLASSIFICATION" = "CLASS1" ]
then
	echo "label: gpt" > partition-table
	echo "device: /dev/sda" >> partition-table
	echo "unit: sectors" >> partition-table
	echo "first-lba: 2048" >> partition-table
	echo "last-lba: 1000215182" >> partition-table
	echo " " >> partition-table
	echo "/dev/sda1 : start=           2048, size=     2097152, type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B"   >> partition-table
	echo "/dev/sda2 : start=        2099200, size=     2097152, type=0FC63DAF-8483-4772-8E79-3D69D8477DE4"   >> partition-table
	echo "/dev/sda3 : start=        4196352, size=   996018831, type=E6D6D379-F507-44C2-A23C-238F2A3DF928" >> partition-table
	SECTION6VAR1=$(ls ~ | grep -o "partition-table")
	if	[ ! -z "$SECTION6VAR1" ]
	then
		echo " " ; echo "Partition Table file has been created successfully" ; echo " "
	else
		clear ; echo " " ; echo "Section 6.0: Error detected at section 6 - Command 1" ; exit
	fi
fi

### Second Classification Option
if		[ "$CLASSIFICATION" = "CLASS2" ]
then
	echo "label: gpt" > partition-table
	echo "device: /dev/sda" >> partition-table
	echo "unit: sectors" >> partition-table
	echo "first-lba: 2048" >> partition-table
	echo "last-lba: 1000215182" >> partition-table
	echo " " >> partition-table
	echo "/dev/sda1 : start=           2048, size=     2097152, type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B"   >> partition-table
	echo "/dev/sda2 : start=        2099200, size=     2097152, type=0FC63DAF-8483-4772-8E79-3D69D8477DE4"   >> partition-table
	echo "/dev/sda3 : start=        4196352, size=   996018831, type=E6D6D379-F507-44C2-A23C-238F2A3DF928" >> partition-table
	SECTION6VAR2=$(ls ~ | grep -o "partition-table")
	if	[ ! -z "$SECTION6VAR2" ]
	then
		echo " " ; echo "Partition Table file has been created successfully" ; echo " "
	else
		clear ; echo " " ; echo "Section 6.0: Error detected at section 6 - Command 2" ; exit
	fi
fi
### Third Classification Option
if		[ "$CLASSIFICATION" = "CLASS3" ]
then
	echo "label: gpt" > partition-table
	echo "device: /dev/sda" >> partition-table
	echo "unit: sectors" >> partition-table
	echo "first-lba: 2048" >> partition-table
	echo "last-lba: 1000215182" >> partition-table
	echo " " >> partition-table
	echo "/dev/sda1 : start=           2048, size=     2097152, type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B"   >> partition-table
	echo "/dev/sda2 : start=        2099200, size=     2097152, type=0FC63DAF-8483-4772-8E79-3D69D8477DE4"   >> partition-table
	echo "/dev/sda3 : start=        4196352, size=   996018831, type=E6D6D379-F507-44C2-A23C-238F2A3DF928" >> partition-table
	SECTION6VAR3=$(ls ~ | grep -o "partition-table")
	if	[ ! -z "$SECTION6VAR3" ]
	then
		echo " " ; echo "Partition Table file has been created successfully" ; echo " "
	else
		clear ; echo " " ; echo "Section 6.0: Error detected at section 6 - Command 3" ; exit
	fi
fi
sfdisk /dev/sda < partition-table
SECTION6VAR4=$(fdisk -l | grep "/dev/sda1" | grep -o "EFI System")
SECTION6VAR5=$(fdisk -l | grep "/dev/sda2" | grep -o "Linux filesystem")
SECTION6VAR6=$(fdisk -l | grep "/dev/sda3" | grep -o "Linux LVM")
if 	[ "$SECTION6VAR4" = "EFI System" ] 	&& 
	[ "$SECTION6VAR5" = "Linux filesystem" ]  && 
	[ "$SECTION6VAR6" = "Linux LVM" ]	;
then
	echo " " ; echo "Harddrive partitions have been setup successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 6.0: Error detected at section 6 - Command 4" ; exit
fi

#################### Section 7.0 (Format SDA1 EFI Boot Partition) ####################

mkfs.fat -F32 /dev/sda1
SECTION7VAR1=$(file -sL /dev/sda1 | grep -o "FAT (32 bit)")
if	[ ! -z "$SECTION7VAR1" ]
then
	echo " " ; echo "EFI Boot Partition has been formatted to Fat32 successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 7.0: Error detected at section 7 - Command 1" ; exit
fi

##################### Section 8.0 (Format SDA2 Boot Partition) ####################

printf 'y\n' | mkfs.ext4 /dev/sda2
SECTION8VAR1=$(file -sL /dev/sda2 | grep "ext4 filesystem")
if	[ ! -z "$SECTION8VAR1" ]
then
	echo " " ; echo "Linux Boot Partition has been formatted to Ext4 successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 8.0: Error detected at section 8 - Command 1" ; exit
fi

#################### Section 9.0 (Setup of SDA 3 LUKS Partition Encrypted Container) ####################

echo "#!/usr/bin/expect -f" > expectfile
echo "set send_slow {1 0.001}" >> expectfile
echo "spawn cryptsetup luksFormat /dev/sda3" >> expectfile
echo "expect \"Are you sure? (Type 'yes' in capital letters):\\r\"" >> expectfile
echo "send -s \"YES\\r\"" >> expectfile
echo "expect \"Enter passphrase for /dev/sda3:\\r\"" >> expectfile
echo "send -s \"$LUKSPASSPHRASE\\r\"" >> expectfile
echo "expect \"Verify passphrase:\\r\"" >> expectfile
echo "send -s \"$LUKSPASSPHRASE\\r\"" >> expectfile
echo "interact" >> expectfile
chmod 777 expectfile
SECTION9VAR1=$(ls ~ | grep -o "expectfile")
if	[ ! -z "$SECTION9VAR1" ]
then
	echo " " ; echo "Expect file has been created successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 9.0: Error detected at section 9 - Command 1" ; exit
fi

expect expectfile
sleep 2s
echo " "
echo "LUKS Encrypted Container has been setup successfully "
echo " "
sleep 2s

#################### Section 10.0 (Open LUKS Container) ####################

printf '%s\n' "$LUKSPASSPHRASE" | cryptsetup open --type luks /dev/sda3 lvm
echo " " ; echo "LUKS Container has been opened with the provided passphrase successfully " ; echo " "
sleep 2s

#################### Section 11.0 (Setup Physical Volume) ####################

pvcreate --dataalignment 1m /dev/mapper/lvm
SECTION11VAR1=$(pvs | grep -o "/dev/mapper/lvm")
if	[ ! -z "$SECTION11VAR1" ]
then
	echo " " ; echo "LUKS Physical volume has been setup successfully" ; echo " " ; 
else
	clear ; echo " " ; echo "Section 11.0: Error detected at section 11 - Command 1" ; exit
fi
sleep 2s

#################### Section 12.0 (Setup Virtual Volume Group) ####################

vgcreate volgroup0 /dev/mapper/lvm
SECTION12VAR1=$(vgdisplay volgroup0 | grep -o "volgroup0")
if	[ ! -z "$SECTION12VAR1" ]
then
	echo " " ; echo "LVM Volume Group has been setup successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 12.0: Error detected at section 12 - Command 1" ; exit
fi
sleep 2s

#################### Section 13.0 (Setup Live Volumes for LUKS Encrypted Drive) ####################

lvcreate -L 50GB volgroup0 -n lv_root
SECTION13VAR1=$(lvdisplay | grep -o "/dev/volgroup0/lv_root")
if	[ ! -z "$SECTION13VAR1" ]
then
	echo " " ; echo "LVM Root Volume has been setup successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 13.0: Error detected at section 13 - Command 1" ; exit
fi
sleep 2s

###lvcreate -L 350GB volgroup0 -n lv_home - Alternate command

lvcreate -l 100%FREE volgroup0 -n lv_home
SECTION13VAR2=$(lvdisplay | grep -o "/dev/volgroup0/lv_home")
if	[ ! -z "$SECTION13VAR2" ]
then
	echo " " ; echo "LVM Home Volume has been setup successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 13.0: Error detected at section 13 - Command 2" ; exit
fi
sleep 2s

#################### Section 14.0 (Create Root Filesystem for LUKS encrypted drive) ####################

mkfs.ext4 /dev/volgroup0/lv_root
SECTION14VAR1=$(file -sL /dev/volgroup0/lv_root | grep -o "ext4")
if	[ ! -z "$SECTION14VAR1" ]
then
	echo " " ; echo "LVM Root Volume has been formatted to Ext4 successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 14.0: Error detected at section 14 - Command 1" ; exit
fi
sleep 2s

#################### Section 15.0 (Create Home Filesystem for LUKS encrypted drive) ####################

mkfs.ext4 /dev/volgroup0/lv_home
SECTION15VAR1=$(file -sL /dev/volgroup0/lv_home | grep -o "ext4")
if	[ ! -z "$SECTION15VAR1" ]
then
	echo " " ; echo "LVM Home Volume has been formatted to Ext4 successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 15.0: Error detected at section 15 - Command 1" ; exit
fi
sleep 2s

#################### Section 16.0 (Mount Home and Boot Volumes) ####################

mount /dev/volgroup0/lv_root /mnt
SECTION16VAR1=$(lsblk /dev/volgroup0/lv_root | grep -o "/mnt")
if	[ ! -z "$SECTION16VAR1" ]
then
	echo " " ; echo "LVM Root Volume mounted to /mnt successfully" ; echo " " ; 
else
	clear ; echo " " ; echo "Section 16.0: Error detected at section 16 - Command 1" ; exit
fi
sleep 2s

mkdir /mnt/home
SECTION16VAR2=$(ls /mnt | grep "home")
if	[ ! -z "$SECTION16VAR2" ]
then
	echo " " ; echo "Home Directory created successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 16.0: Error detected at section 16 - Command 2" ; exit
fi
sleep 2s

mount /dev/volgroup0/lv_home /mnt/home
SECTION16VAR3=$(lsblk | grep "volgroup0-lv_home" | grep -o "/mnt/home")
if	[ ! -z "$SECTION16VAR3" ]
then
	echo " " ; echo "LVM Home Volume mounted to /mnt successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 16.0: Error detected at section 16 - Command 3" ; exit
fi
sleep 2s

mkdir /mnt/boot
SECTION16VAR4=$(ls /mnt | grep -o "boot")
if	[ ! -z "$SECTION16VAR4" ]
then
	echo " " ; echo "Boot Directory created successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 16.0: Error detected at section 16 - Command 4" ; exit
fi
sleep 2s

mount /dev/sda2 /mnt/boot
SECTION16VAR5=$(lsblk /dev/sda2 | grep -o "/mnt/boot")
if	[ ! -z "$SECTION16VAR5" ]
then
	echo " " ; echo "Linux Boot Partition mounted to /mnt/boot successfully" ; echo " " ; 
else
	clear ; echo " " ; echo "Section 16.0: Error detected at section 16 - Command 5" ; exit
fi
sleep 2s

mkdir /mnt/etc
SECTION16VAR6=$(ls /mnt | grep -o "etc")
if	[ ! -z "$SECTION16VAR6" ]
then
	echo " " ; echo "/mnt/etc Directory created successfully" ; echo " " 
else
	clear ; echo " " ; echo "Section 16.0: Error detected at section 16 - Command 6" ; exit
fi
sleep 2s

#################### Section 17.0 (Configures Filesystem Table for Boot) ####################

genfstab -U -p /mnt >> /mnt/etc/fstab
SECTION17VAR1=$(grep -o "/dev/mapper/volgroup0-lv_root" /mnt/etc/fstab)
if	[ ! -z "$SECTION17VAR1" ]
then
	echo " " ; echo "fstab file has been generated successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 17.0: Error detected at section 17 - Command 1" ; exit
fi
sleep 2s

#################### Section 18.0 (Download Base Arch Linux into Mount location) ####################

printf '\n\n\n\n\n' | pacstrap -i /mnt base
sleep 2s
SECTION18VAR1=$(ls /mnt | grep -o "root")
if	[ ! -z "$SECTION18VAR1" ]
then
	echo " " ; echo "Base Arch Linux System has been downloaded into the bootup location successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 18.0: Error detected at section 18 - Command 1" ; exit
fi
sleep 2s

#################### Section 19.0 (Install Linux LTS Version to CHROOT) ####################

printf '\n\n\n\n\n' | arch-chroot /mnt pacman -S linux-lts linux-lts-headers
SECTION19VAR1=$(ls /mnt/usr/src | grep -o "linux-lts")
if	[ ! -z "$SECTION19VAR1" ]
then
	echo " " ; echo "Linux LTS has been downloaded and installed into the bootup location successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 19.0: Error detected at section 19 - Command 1" ; exit
fi
sleep 2s

printf '\n\n\n\n\n' | arch-chroot /mnt pacman -S linux-lts-headers
SECTION19VAR2=$(ls /mnt/var/lib/pacman/local | grep -o "linux-lts-headers")
if	[ ! -z "$SECTION19VAR2" ]
then
	echo " " ; echo "Linux LTS Headers have been downloaded and installed into the bootup location successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 19.0: Error detected at section 19 - Command 2" ; exit
fi
sleep 2s

#################### Section 20.0 (Install Linux Firmware to CHROOT) ####################

###note need to install firmware (aic94xx;wd719x) most likely from Arch Linux AUR

printf '\n\n\n\n\n' | arch-chroot /mnt pacman -S linux-firmware
SECTION20VAR1=$(ls /mnt/var/lib/pacman/local | grep -o "linux-firmware")
if	[ ! -z "$SECTION20VAR1" ]
then
	echo " " ; echo "Linux Firmware files have been downloaded and installed successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 20.0: Error detected at section 20 - Command 1" ; exit
fi
sleep 2s

#################### Section 21.0 (Install Text Editor Packages to CHROOT) ####################

printf '\n\n\n\n\n' | arch-chroot /mnt pacman -S nano
SECTION21VAR1=$(which nano | grep -o "nano")
if	[ ! -z "$SECTION21VAR1" ]
then
	echo " " ; echo "Nano Text Editor Software has been downloaded and installed successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 21.0: Error detected at section 21 - Command 1" ; exit
fi
sleep 2s

printf '\n\n\n\n\n' | arch-chroot /mnt pacman -S vim
SECTION21VAR2=$(which vim | grep -o "vim")
if	[ ! -z "$SECTION21VAR2" ]
then
	echo " " ; echo "Vim Text Editor Software has been downloaded and installed successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 21.0: Error detected at section 21 - Command 2" ; exit
fi
sleep 2s

#################### Section 22.0 (Install Base Developer Packages to CHROOT) ####################

printf '\n\n\n\n\n' | arch-chroot /mnt pacman -S base-devel

#################### Section 23.0 (Install Software Packages to CHROOT) ####################

printf '\n\n\n\n\n' | arch-chroot /mnt pacman -S openssh
SECTION23VAR1=$(arch-chroot /mnt which sshd | grep -o "sshd")
if	[ ! -z "$SECTION23VAR1" ]
then
	echo " " ; echo "OpenSSH has been downloaded and installed successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 23.0: Error detected at section 23 - Command 1" ; exit
fi
sleep 2s

printf '\n\n\n\n\n' | arch-chroot /mnt pacman -S networkmanager
echo " " ; echo "NetworkManager has been downloaded and installed successfully " ; echo " "
sleep 2s

printf '\n\n\n\n\n' | arch-chroot /mnt pacman -S wpa_supplicant
SECTION23VAR3=$(arch-chroot /mnt which wpa_supplicant | grep -o "wpa_supplicant")
if	[ ! -z "$SECTION23VAR3" ]
then
	echo " " ; echo "WPA_Supplicant Software has been downloaded and installed successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 23.0: Error detected at section 23 - Command 3" ; exit
fi
sleep 2s

printf '\n\n\n\n\n' | arch-chroot /mnt pacman -S wireless_tools
echo " "
echo "Wireless_Tools has been downloaded and installed successfully "
echo " "
sleep 2s

printf '\n\n\n\n\n' | arch-chroot /mnt pacman -S netctl
SECTION23VAR5=$(arch-chroot /mnt which netctl | grep -o "netctl")
if	[ ! -z "$SECTION23VAR5" ]
then
	echo " " ; echo "Netctl Software has been downloaded and installed successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 23.0: Error detected at section 23 - Command 5" ; exit
fi
sleep 2s

printf '\n\n\n\n\n' | arch-chroot /mnt pacman -S dhcpcd
SECTION23VAR6=$(arch-chroot /mnt which dhcpcd | grep -o "dhcpcd")
if	[ ! -z "$SECTION23VAR6" ]
then
	echo " " ; echo "DHCPCD Software has been downloaded and installed successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 23.0: Error detected at section 23 - Command 6" ; exit
fi
sleep 2s

printf '\n\n\n\n\n' | arch-chroot /mnt pacman -S dialog
SECTION23VAR7=$(arch-chroot /mnt which dialog | grep -o "dialog")
if	[ ! -z "$SECTION23VAR7" ]
then
	echo " " ; echo "Dialog has been downloaded and installed successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 23.0: Error detected at section 23 - Command 7" ; exit
fi
sleep 2s

printf '\n\n\n' | arch-chroot /mnt pacman -S lvm2
echo " "
echo "LVM2 Software has been downloaded and installed successfully "
echo " "
sleep 2s

#################### Section 24.0 (Enable Services) ####################

arch-chroot /mnt systemctl enable NetworkManager
SECTION24VAR1=$(ls /mnt/usr/lib/systemd/system | grep -w "NetworkManager.service.d")
if	[ ! -z "$SECTION24VAR1" ]
then
	echo " " ; echo "Network Manager has been enabled successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 24.0: Error detected at section 24 - Command 1" ; exit
fi
sleep 2s

arch-chroot /mnt systemctl enable dhcpcd
SECTION24VAR2=$(ls /mnt/usr/lib/systemd/system | grep -o "dhcpcd.service")
if	[ ! -z "$SECTION24VAR2" ]
then
	echo " " ; echo "DHCP Service has been enabled successfully" ; echo " " 
else
	clear ; echo " " ; echo "Section 24.0: Error detected at section 24 - Command 2" ; exit
fi
sleep 2s

arch-chroot /mnt systemctl enable sshd
SECTION24VAR3=$(ls /mnt/usr/lib/systemd/system | grep "sshd.service")
if	[ ! -z "$SECTION24VAR3" ]
then
	echo " " ; echo "SSH Service has been enabled successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 24.0: Error detected at section 24 - Command 3" ; exit
fi
sleep 2s

#################### Section 25.0 (Enable Encryption and LVM2 functionality to CHROOT) ####################

arch-chroot /mnt sed -i "s/block/block encrypt lvm2/" /etc/mkinitcpio.conf
SECTION25VAR1=$(grep "HOOKS=(base udev autodetect modconf block encrypt lvm2 filesystems" /mnt/etc/mkinitcpio.conf | grep -o "encrypt")
if	[ ! -z "$SECTION25VAR1" ]
then
	echo " " ; echo "LVM Encryption has been configured ready for first bootup successfully" ; echo " " 
else
	clear ; echo " " ; echo "Section 25.0: Error detected at section 25 - Command 1" ; exit
fi
sleep 2s

arch-chroot /mnt mkinitcpio -p linux-lts
SECTION25VAR2=$(ls /mnt/boot | grep "initramfs-linux-lts.img")
if	[ ! -z "$SECTION25VAR2" ]
then
	echo " " ; echo "Linux LTS System has been initilaized successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 25.0: Error detected at section 25 - Command 2" ; exit
fi
sleep 2s

#################### Section 26.0 (Configure Language and Locale Settings) ####################

arch-chroot /mnt sed -i "s/#en_AU.UTF-8/en_AU.UTF-8/" /etc/locale.gen
SECTION26VAR1=$(grep -o "#en_AU.UTF-8 UTF-8" /mnt/etc/locale.gen | grep -o "en_AU.UTF-8")
if	[ -z "$SECTION26VAR1" ]
then
	echo " " ; echo "Australian Location Settings have been enabled successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 26.0: Error detected at section 26 - Command 1" ; exit
fi
sleep 2s

echo "LANG=en_AU.UTF-8" > /mnt/etc/locale.conf
SECTION26VAR2=$(grep -o "LANG=en_AU.UTF-8" /mnt/etc/locale.conf)
if	[ ! -z "$SECTION26VAR2" ]
then
	echo " " ; echo "Australian Language Settings have been enabled successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 26.0: Error detected at section 26 - Command 2" ; exit
fi
sleep 2s

arch-chroot /mnt locale-gen
echo " "
echo "Location configuration has been generated successfully "
echo " "
sleep 2s

cp /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist
SECTION26VAR4=$(grep -o "##Server" /mnt/etc/pacman.d/mirrorlist)
if	[ ! -z "$SECTION26VAR4" ]
then
	echo " " ; echo "Mirrorlist file has been configured ready for first bootup successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 26.0: Error detected at section 26 - Command 4" ; exit
fi
sleep 2s

#################### Section 27.0 (Configure Hostname) ####################

echo "$CLASSIFICATION$HOSTNAME" > /mnt/etc/hostname
SECTION27VAR1=$(grep "$CLASSIFICATION$HOSTNAME" /mnt/etc/hostname)
if	[ ! -z "$SECTION27VAR1" ]
then
	echo " " ; echo "Hostname has been configured successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 27.0: Error detected at section 27 - Command 1" ; exit
fi
sleep 2s

#################### Section 28.0 (Configure Hosts File) ####################

echo " " >> /mnt/etc/hosts

echo "127.0.0.1   localhost" >> /mnt/etc/hosts
SECTION28VAR1=$(grep -o "127.0.0.1" /mnt/etc/hosts)
if	[ ! -z "$SECTION28VAR1" ]
then
	echo " " ; echo "Hosts file line 1 modification completed successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 28.0: Error detected at section 28 - Command 1" ; exit
fi

echo "::1   localhost" >> /mnt/etc/hosts
SECTION28VAR2=$(grep -o "::1" /mnt/etc/hosts)
if	[ ! -z "$SECTION28VAR2" ]
then
	echo " " ; echo "Hosts file line 2 modification completed successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 28.0: Error detected at section 28 - Command 2" ; exit
fi

echo "127.0.1.1   $CLASSIFICATION$HOSTNAME.localdomain   $CLASSIFICATION$HOSTNAME" >> /mnt/etc/hosts
SECTION28VAR3=$(grep -o "$CLASSIFICATION$HOSTNAME.localdomain" /mnt/etc/hosts)
if	[ ! -z "$SECTION28VAR3" ]
then
	echo " " ; echo "Hosts file line 3 modification completed successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 28.0: Error detected at section 28 - Command 3" ; exit
fi
echo "Host file has been configured successfully "

#################### Section 29.0 (Install Sudo and Setup Root Level Password) ####################

printf '\n\n\n\n\n' | arch-chroot /mnt pacman -S sudo
SECTION29VAR1=$(arch-chroot /mnt which sudo | grep -o "sudo")
if	[ ! -z "$SECTION29VAR1" ]
then
	echo " " ; echo "Sudo Software package has been downloaded and installed successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 29.0: Error detected at section 29 - Command 1" ; exit
fi
sleep 2s

#################### Section 30.0 (Set Root Password) ####################

printf "$ROOTPASSWORD\n$ROOTPASSWORD" | arch-chroot /mnt passwd
echo " "
echo "Root User Password has been set successfully"
echo " "
sleep 2s

#################### Section 31.0 (Setup Users and Groups) ####################

arch-chroot /mnt useradd -m -g users -G wheel $A_USERNAME_1
echo " "
echo "Administrator Account has been created successfully"
echo " "
sleep 2s

printf "$A_USERPASSWORD_1\n$A_USERPASSWORD_1" | arch-chroot /mnt passwd $A_USERNAME_1
echo " "
echo "Administrator Account Password has been set successfully"
echo " "
sleep 2s

#################### Section 32.0 (Enable Wheel Group) ####################

sudo sed -i 's/^#\s*\(%wheel\s\+ALL=(ALL)\s\+ALL\)/\1/' /etc/sudoers

#################### Section 33.0 (Download GRUB Bootloader Software Packages) ####################

printf '\n\n\n\n\n' | arch-chroot /mnt pacman -S grub
echo " "
echo "GRUB Software packages have been downloaded and installed successfully "
sleep 2s

printf '\n\n\n\n\n' | arch-chroot /mnt pacman -S efibootmgr
SECTION33VAR2=$(which efibootmgr | grep -o "efibootmgr")
if	[ ! -z "$SECTION33VAR2" ]
then
	echo " " ; echo "EFI Boot Manager has been downloaded and installed successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 33.0: Error detected at section 33 - Command 2" ; exit
fi
sleep 2s

printf '\n\n\n\n\n' | arch-chroot /mnt pacman -S dosfstools
echo " "
echo "DOS Filesystem Tools has been downloaded and installed successfully"
sleep 2s

printf '\n\n\n\n\n' | arch-chroot /mnt pacman -S os-prober
SECTION33VAR4=$(arch-chroot /mnt which os-prober | grep -o "os-prober")
if	[ ! -z "$SECTION33VAR4" ]
then
	echo " " ; echo "OS-Prober has been downloaded and installed successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 33.0: Error detected at section 33 - Command 4" ; exit
fi
sleep 2s

printf '\n\n\n\n\n' | arch-chroot /mnt pacman -S mtools
SECTION33VAR5=$(arch-chroot /mnt which mtools | grep -o "mtools")
if	[ ! -z "$SECTION33VAR5" ]
then
	echo " " ; echo "MTools has been downloaded and installed successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 33.0: Error detected at section 33 - Command 5" ; exit
fi
sleep 2s

#################### Section 34.0 (Configure Encryption GRUB Boot) ####################

arch-chroot /mnt sed -i "s/#GRUB_ENABLE_CRYPTODISK=y/GRUB_ENABLE_CRYPTODISK=y/" /etc/default/grub
SECTION34VAR1=$(grep -o "#GRUB_ENABLE_CRYPTODISK=y" /mnt/etc/default/grub)
if	[ -z "$SECTION34VAR1" ]
then
	echo " " ; echo "Grub Crypto Disk Boot Setting 1 has been configured successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 34.0: Error detected at section 34 - Command 1" ; exit
fi
sleep 2s

arch-chroot /mnt sed -i "s/GRUB_CMDLINE_LINUX_DEFAULT=\"loglevel=3 quiet\"/GRUB_CMDLINE_LINUX_DEFAULT=\"loglevel=3 cryptdevice=\/dev\/sda3:volgroup0:allow-discards quiet\"/" /etc/default/grub
SECTION34VAR2=$(grep -o "loglevel=3 cryptdevice=/dev/sda3:volgroup0:allow-discards quiet" /mnt/etc/default/grub | grep -o "cryptdevice")
if	[ ! -z "$SECTION34VAR2" ]
then
	echo " " ; echo "Grub Crypto Disk Boot Setting 2 has been configured successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 34.0: Error detected at section 34 - Command 2" ; exit
fi
sleep 2s

#################### Section 35.0 (Setup and Enable EFI Booting) ####################

arch-chroot /mnt mkdir /boot/EFI
SECTION35VAR1=$(ls /mnt/boot | grep -o "EFI")
if	[ ! -z "$SECTION35VAR1" ]
then
	echo " " ; echo "EFI bootup directory has been created successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 35.0: Error detected at section 35 - Command 1" ; exit
fi
sleep 2s

arch-chroot /mnt mount /dev/sda1 /boot/EFI
SECTION35VAR2=$(lsblk /dev/sda1 | grep -o "/mnt/boot/EFI")
if	[ ! -z "$SECTION35VAR2" ]
then
	echo " " ; echo "EFI boot partition has been mounted successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 35.0: Error detected at section 35 - Command 2" ; exit
fi
sleep 2s

#################### Section 36.0 (Install GRUB Bootloader) ####################

arch-chroot /mnt grub-install --target=x86_64-efi --bootloader-id=grub_uefi --recheck
SECTION36VAR1=$(ls /mnt/usr/bin | grep -o "grub-install")
if	[ ! -z "$SECTION36VAR1" ]
then
	echo " " ; echo "Grub boot loader has been installed ready for bootup successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 36.0: Error detected at section 36 - Command 1" ; exit
fi
sleep 2s

#################### Section 37.0 (Setup and Enable Location Settings for Boot) ####################

arch-chroot /mnt mkdir /boot/grub/locale
SECTION37VAR1=$(ls /mnt/boot/grub | grep -o "locale")
if	[ ! -z "$SECTION37VAR1" ]
then
	echo " " ; echo "Grub locale file has been created successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 37.0: Error detected at section 37 - Command 1" ; exit
fi
sleep 2s

arch-chroot /mnt cp /usr/share/locale/en\@quot/LC_MESSAGES/grub.mo /boot/grub/locale/en.mo
SECTION37VAR2=$(ls /mnt/boot/grub/locale | grep -o "en.mo")
if	[ ! -z "$SECTION37VAR2" ]
then
	echo " " ; echo "Grub English locale settings have been setup successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 37.0: Error detected at section 37 - Command 2" ; exit
fi
sleep 2s

arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
echo " "
echo "Grub configuration file has been generated successfully "
echo " "
sleep 2s

##################### Section 38.0 (Create and Setup Swapfile) ####################

arch-chroot /mnt fallocate -l 4G /swapfile
SECTION38VAR1=$(ls -la /mnt | grep "swapfile" | grep -o "4294967296")
if	[ ! -z "$SECTION38VAR1" ]
then
	echo " " ; echo "Harddrive space has been allocated for swapfile successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 38.0: Error detected at section 38 - Command 1" ; exit
fi
sleep 2s

arch-chroot /mnt chmod 600 /swapfile
SECTION38VAR2=$(ls -la /mnt | grep "swapfile" | grep -o "\-rw-------")
if	[ ! -z "$SECTION38VAR2" ]
then
	echo " " ; echo "Swapfile Security permissions have been configured successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 38.0: Error detected at section 38 - Command 2" ; exit
fi
sleep 2s

arch-chroot /mnt mkswap /swapfile
echo " "
echo "Swapfile has been enabled successfully "
echo " "
sleep 2s

#################### Section 39.0 (Backup FSTAB file) ####################

arch-chroot /mnt cp /etc/fstab /etc/fstab.bak
SECTION39VAR1=$(ls /mnt/etc | grep -o "fstab.bak")
if	[ ! -z "$SECTION39VAR1" ]
then
	echo " " ; echo "fstab backup file has been created successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 39.0: Error detected at section 39 - Command 1" ; exit
fi
sleep 2s

#################### Section 40.0 (Setup Swapfile Boot Configuration) ####################

echo '/swapfile none swap sw 0 0' >> /mnt/etc/fstab
SECTION40VAR1=$(grep -o "/swapfile none swap sw 0 0" /mnt/etc/fstab | grep -o "swapfile")
if	[ ! -z "$SECTION40VAR1" ]
then
	echo " " ; echo "swapfile boot settings have been enabled in fstab successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 40.0: Error detected at section 40 - Command 1" ; exit
fi
sleep 2s

#################### Section 41.0 (Install Intel Software Packages) ####################

printf '\n\n\n\n\n' | arch-chroot /mnt pacman -S intel-ucode
echo " "
echo "Intel Software has been downloaded and installed successfully "
echo " "
sleep 2s

#################### Section 42.0 (Install GUI Base Software) ####################

printf '\n\n\n\n\n' |  arch-chroot /mnt pacman -S xorg xorg-server
echo " "
echo "GUI Software has been downloaded and installed successfully "
echo " "
sleep 2s

#################### Section 43.0 (Install MESA Package) ####################

printf '\n\n\n\n\n' |  arch-chroot /mnt pacman -S mesa
echo " "
echo "mesa software has been downloaded and installed successfully "
echo " "
sleep 2s

#################### Section 44.0 (Install GNOME Desktop and Configuration for Boot) ####################

printf '\n\n\n\n\n\n\n\n' | arch-chroot /mnt pacman -S gnome gnome-extra
echo " "
echo "GNOME GUI has been downloaded and installed successfully "
echo " "
sleep 2s

arch-chroot /mnt systemctl enable gdm.service
SECTION44VAR2=$(ls -la /mnt/usr/lib/systemd/system | grep -o "gdm.service")
if	[ ! -z "$SECTION44VAR2" ]
then
	echo " " ; echo "GNOME GUI Service has been enabled successfully" ; echo " "
else
	clear ; echo " " ; echo "Section 44.0: Error detected at section 44 - Command 2" ; exit
fi
sleep 2s

#################### Section 45.0 (Unmount All prior to reboot) ####################

umount -a
echo " "
echo "Attempted to unmount all drives ready for system shutdown "
echo " "
sleep 2s
clear

#################### Section 46.0 (Power Off and Remove USB) ####################

echo "Installation Complete. Poweroff the System. Unplug the bootable USB and set boot device EFI / GRUB in bios"
### press any key to Shut Down.

######################################## END OF SCRIPT ########################################

#!/bin/bash

### To lauch the script automatically type this command: sudo curl https://raw.githubusercontent.com/EdwardTeach1/PublicScripts/master/AutoArchInstall | sudo bash

######################################## START OF SCRIPT ########################################

#################### Section 1.0 (Collection of data) ####################
HOSTNAME="ViperLaptop"
A_USERNAME_1="Administrator"
A_USERPASSWORD_1="Password1"
ROOTPASSWORD="Password1"
LUKSPASSPHRASE="1234567890"
CLASSIFICATION="CLASS1"

## Setup of Default Variables
OPTION1STATUS="  READY  " && OPTION2STATUS="  READY  " && OPTION3STATUS="  READY  " && OPTION4STATUS="  READY  " && OPTION5STATUS="  READY  "
OPTION6STATUS="  READY  " && OPTION7STATUS="  READY  " && OPTION8STATUS="  READY  " && OPTION9STATUS="  READY  " && OPTION10STATUS="  READY  "
STARTSTATUS="READY TO INSTALL"

## Setup of While loop Counters
OPTION1COUNTER=1 && OPTION2COUNTER=1 && OPTION3COUNTER=1 && OPTION4COUNTER=1 && OPTION5COUNTER=1
OPTION6COUNTER=1 && OPTION7COUNTER=1 && OPTION8COUNTER=1 && OPTION9COUNTER=1 && OPTION10COUNTER=1

START=$((OPTION1COUNTER+OPTION2COUNTER+OPTION3COUNTER+OPTION4COUNTER+OPTION5COUNTER+OPTION6COUNTER))

while [ $START -lt 100 ]
do
START=$((OPTION1COUNTER+OPTION2COUNTER+OPTION3COUNTER+OPTION4COUNTER+OPTION5COUNTER+OPTION6COUNTER))
if [ $START -lt 6 ]
then	STARTSTATUS="   NOT READY    "
else	STARTSTATUS="READY TO INSTALL"
fi
clear
echo "
                                .--'    ..............             '.............'             '..............     ....''    
                             '+dmMMd   'hdmmmmmmmmmmmh             .dmmmmmmmmmmmmo             .dmmmmmmmmmmmms   :dm:.:yh    
                            +ms.hMMd   'hmmmmmmmmmmmmh             .dmmmmmmmmmmmmo             .dmdmmmmmmmmmms   :mMmhs+/    
                           hMhoomMMmo/ 'hmmdmmmmmmmmmy             .dmmdmmmmmmmmmo             .dmdmmmdddmmmms   o-'-/sNM:   
                           ''''/dNNm:' 'hmmmhyyyyyyyys.............-yyhdddmmmdmdh+.............-yhhhhhhdddmmms   syo//+h+'   
                                ````   'hmmd+//////////////////////////hmmmmmmdd+/////////////////////odddmmms               
                                       'hmmd+//////////////////////////hddmmmmdy//////////////////////odddmmms               
                                       'hmmd+//////yhy''''.://////////odmmmmmmd+//////:........-yyyyyyhdddmmms               
                              '-/++/'  'hmmd+//////dmy  '-//////////+yddmmmmmds///////.        .dmdmmdddmmmmms               
                           '+dNd/.     'hmmd+//////dmy'.//////////::ddmmmmmmdh///////:--::::::::syhdmmmmmmmmms   .+o//+o/'   
                           hMMMoshmho' 'hmmdyyyyyyyddy://///////:. .dmdmmmdmdo/////////////////////+ohddmmmmms  oNN-   +MN:  
                           hMMy   NMM+ 'hmmdmmmmmmdh+/////////:.   .dmdmmmdmy///////::-.....-:////////+hmmmmms 'mMN    -MMs  
                           '+ydsoydy/  'hmmmmmdmdho/////////:.     .ddddmdmmdddhh+.'          ':////////hmmmms  -hN+''.hNs'  
                                       'hmdmddmds/////////:.'  ':://+++dmdmmmmmmdo             '////////smmmms    ':+mNh.'   
                                       'hmdmdds/////////:-'    '///////dmmddhhhhh+..           .////////ydmmms       ./+/:'  
                                       'hmddy+/////////-'''''''.///////hmmdh////////-'        .:///////odmmmms               
                                       'hmdo///////////////////////////hdmmdh+////////:--..--:///////+ydmmmmms               
                            ./+ooo+-'  'hmdo///////////////////////////hddmmmdyo+//////////////////oydmmmmmmms '...'   ....' 
                           oNM+''dMMh  'hmdsooooooooo+::::::::::::::ooohmdmmmddmdo.---:::::::---yddmmdmmmmmmms ':mNNo. -yy-' 
                           '-:./hMNs.  'hmdmmmdddddddy             .dmmmmmmmmmmmmo             .dmmmmmmmmmmmms   h:oNNo.+o   
                           '/yNNy/'.:' 'hmmmmmmmmmmmmy             .dmmmmmmmmmmmmo             .dmmmmmmmmmmmms   h- 'oNNdo   
                           shhhyyyyhy' 'oyyyyyyyyyyyyo             .syyyyyyyyyyyy/             'syyyyyyyyyyyy+ .:yo-  '+h/ 
"
echo " "

if [ -z "$HOSTNAME" ]
then	OPTION1COUNTER=0 && OPTION1STATUS="NOT READY"
fi
if [ -z "$A_USERNAME_1" ]
then	OPTION2COUNTER=0 && OPTION2STATUS="NOT READY"
fi
if [ -z "$A_USERPASSWORD_1" ]
then	OPTION3COUNTER=0 && OPTION3STATUS="NOT READY"
fi
if [ -z "$ROOTPASSWORD" ]
then	OPTION4COUNTER=0 && OPTION4STATUS="NOT READY"
fi
if [ -z "$LUKSPASSPHRASE" ]
then	OPTION5COUNTER=0 && OPTION5STATUS="NOT READY"
fi
if [ -z "$CLASSIFICATION" ]
then	OPTION6COUNTER=0 && OPTION6STATUS="NOT READY"
fi
echo	'						    Welcome to the 462SQN Arch Installation Script.'
echo	" "
echo	"Configure the following options before starting the Installation"
echo	" "
echo	" 1 - Configure a Hostname for this Installation. Default = ViperLaptop ------------------- [ $OPTION1STATUS ] ---------- : $HOSTNAME "
echo	" 2 - Configure an Administrative Account Username. Default Username = Administrator ------ [ $OPTION2STATUS ] ---------- : $A_USERNAME_1 "
echo	" 3 - Configure the Adminstrative Account Password. Default Password = Password1 ---------- [ $OPTION3STATUS ] ---------- : $A_USERPASSWORD_1 "
echo	" 4 - Set the Root Password. Default = Password1 ------------------------------------------ [ $OPTION4STATUS ] ---------- : $ROOTPASSWORD"
echo	" 5 - Set PassPhrase for LVM Drive Encryption. Default = 1234567890 ----------------------- [ $OPTION5STATUS ] ---------- : $LUKSPASSPHRASE "
echo	" 6 - Select the Classification of the system. Default = CLASS1 --------------------------- [ $OPTION6STATUS ] ---------- : $CLASSIFICATION "
echo	" 9 - START the Installation. Type the number 9 to begin the Installation. ----------------------------------------- [ $STARTSTATUS ]"
echo	" "
echo	"Select a number option and press Enter to continue "
echo	" "

read selection

case	$selection in

	1) read -p 'Enter a new Hostname: ' HOSTNAME &&
	if [ -z "$HOSTNAME" ]
		then	OPTION1STATUS="NOT_READY"
			    OPTION1COUNTER=0
		else	OPTION1STATUS="  READY  "
		    	OPTION1COUNTER=1
	fi ;;

	2) read -p 'Enter a Username: ' A_USERNAME_1 &&	
	if [ -z "$A_USERNAME_1" ]
		then	OPTION2STATUS="NOT_READY" && OPTION2COUNTER=0
		else	OPTION2STATUS="  READY  " && OPTION2COUNTER=1
	fi ;;

	3) read -p 'Enter a Password: ' A_USERPASSWORD_1 &&
	if [ -z "$A_USERPASSWORD_1" ]
		then	OPTION3STATUS="NOT_READY" && OPTION3COUNTER=0
		else	OPTION3STATUS="  READY  " && OPTION3COUNTER=1
	fi ;;

	4) read -p 'Enter a Root Password: ' ROOTPASSWORD &&
	if [ -z "$ROOTPASSWORD" ]
		then	OPTION4STATUS="NOT_READY" && OPTION4COUNTER=0
		else	OPTION4STATUS="  READY  " && OPTION4COUNTER=1
	fi ;;

	5) read -p 'Enter a LUKS Drive Encryption PassPhrase: ' LUKSPASSPHRASE &&
	if [ -z "$LUKSPASSPHRASE" ]
		then	OPTION5STATUS="NOT_READY" && OPTION5COUNTER=0
		else	OPTION5STATUS="  READY  " && OPTION5COUNTER=1
	fi ;;

	6) CLASSCOUNTER=0
  while [ $CLASSCOUNTER -eq 0 ]
  do
  clear
  echo	" "
  echo  "1 - CLASS1"
  echo  "2 - CLASS2"
  echo  " "
  echo	"Select a Classification and press Enter to continue "
  echo	" "
  read  CLASSIFICATION
  case	$CLASSIFICATION in
    1) CLASSIFICATION=CLASS1 && CLASSCOUNTER=1 ;;
    2) CLASSIFICATION=CLASS2 && CLASSCOUNTER=1 ;;
    esac
    done
	if [ -z "$CLASSIFICATION" ]
		then	OPTION6STATUS="NOT_READY" && OPTION6COUNTER=0
		else	OPTION6STATUS="  READY  " && OPTION6COUNTER=1
	fi ;;

	9) if	[ $START -eq 6 ]
		then	
			read -p "WARNING: This script will wipe all data from the Harddrive /dev/sda. Are you sure you want to continue? Y or N? " InstallStart
			if      [ "${InstallStart,,}" = "yes" ] || [ "${InstallStart,,}" = "y" ]
				then    echo "Installing Arch Linux !!!" && sleep 2s
				else    exit && echo "Installation Aborted !!!" && sleep 2s && clear
			fi
		sleep 2s && START=100
		else	echo 'One of the Options is still required !!! ' && sleep 2s
	   fi ;;
esac
done

#################### Section 2.0 (Delete Hard Drive Partitions) ####################

#@SECTION2VAR1=$(fdisk -l | grep /dev/sda1)
#@SECTION2VAR2=$(fdisk -l | grep /dev/sda2)
#@SECTION2VAR3=$(fdisk -l | grep /dev/sda3)
#@if 	[ "$SECTION2VAR1" = "/dev/sda1     2048    2099199   2097152    1G EFI System" ] 	&& 
#@	[ "$SECTION2VAR2" = "/dev/sda2  2099200    4196351   2097152    1G Linux filesystem" ] && 
#@	[ "$SECTION2VAR3" = "/dev/sda3  4196352 1000215182 996018831  475G Linux LVM" ]	;
#@then
#@	echo "Harddrive partitions are already setup" ; sleep 2s
#@else
#@	dd if=/dev/zero of=/dev/sda bs=512 count=1 conv=notrunc
#@	SECTION2VAR4=$(lsblk /dev/sda | grep part)
#@	if	[ -z "$SECTION2VAR4" ]
#@	then
#@		echo "Harddrive partitions have been deleted successfully" && sleep 2s
#@	else
#@		clear ; echo "Error detected at section 2 - Command 1" ; exit
#@	fi
#@fi

#################### Section 3.0 (Configure Repository Locations - HTTPS priority) ####################

#@SECTION3VAR1=$(cat /etc/pacman.conf | grep \#Color)
#@if	[ -z "$SECTION3VAR1" ]
#@then
#@	echo "Bash Colours have been set already"
#@else
#@	sed -i "s/#Color/Color/" /etc/pacman.conf
#@	SECTION3VAR1=$(cat /etc/pacman.conf | grep \#Color)
#@	if	[ -z "$SECTION3VAR1" ]
#@	then
#@		clear ; echo "Error detected at section 3 - Command 1" ; exit
#@	fi
#@fi

#@SECTION3VAR2=$(cat /etc/pacman.conf | grep ILoveCandy)
#@if	[ ! -z "$SECTION3VAR2" ]
#@then
#@	echo "PACMAN mode has been enabled already"
#@else
#@	sed -i '/^#VerbosePkgLists/a ILoveCandy' /etc/pacman.conf
#@	SECTION3VAR2=$(cat /etc/pacman.conf | grep ILoveCandy)
#@	if	[ -z "$SECTION3VAR2" ]
#@	then
#@		clear ; echo "Error detected at section 3 - Command 2" ; exit
#@	fi
#@fi

#@sed -i "s/Server/##Server/g" /etc/pacman.d/mirrorlist && sed -i '/## Australia/{n;s/##Server/Server/}' /etc/pacman.d/mirrorlist

#@SECTION3VAR3=$(cat /etc/pacman.d/mirrorlist | grep https://mirror.aarnet.edu.au/pub/archlinux/\\$\repo/os/\\$\arch)
#@if	[ -z "$SECTION3VAR3" ]
#@then
#@	echo "HTTPS Servers have been added to the mirrorlist file successfully"
#@else
#@	sed -i '/## Generated on/a Server = https://mirror.aarnet.edu.au/pub/archlinux/$repo/os/$arch' /etc/pacman.d/mirrorlist
#@	SECTION3VAR3=$(cat /etc/pacman.d/mirrorlist | grep https://mirror.aarnet.edu.au/pub/archlinux/\\$\repo/os/\\$\arch)
#@	if	[ -z "$SECTION3VAR3" ]
#@	then
#@		clear ; echo "Error detected at section 3 - Command 3" ; exit
#@	fi
#@fi

#@SECTION3VAR4=$(cat /etc/pacman.d/mirrorlist | grep https://archlinux.mirror.digitalpacific.com.au/\\$\repo/os/\\$\arch)
#@if	[ -z "$SECTION3VAR4" ]
#@then
#@	echo "HTTPS Servers have been added to the mirrorlist file successfully"
#@else
#@	sed -i '/## Generated on/a Server = https://archlinux.mirror.digitalpacific.com.au/$repo/os/$arch' /etc/pacman.d/mirrorlist
#@	SECTION3VAR4=$(cat /etc/pacman.d/mirrorlist | grep https://archlinux.mirror.digitalpacific.com.au/\\$\repo/os/\\$\arch)
#@	if	[ -z "$SECTION3VAR4" ]
#@	then
#@		clear ; echo "Error detected at section 3 - Command 4" ; exit
#@	fi
#@fi

#@SECTION3VAR5=$(cat /etc/pacman.d/mirrorlist | grep https://syd.mirror.rackspace.com/archlinux/\\$\repo/os/\\$\arch)
#@if	[ -z "$SECTION3VAR5" ]
#@then
#@	echo "HTTPS Servers have been added to the mirrorlist file successfully"
#@else
#@	sed -i '/## Generated on/a Server = https://syd.mirror.rackspace.com/archlinux/$repo/os/$arch' /etc/pacman.d/mirrorlist
#@	SECTION3VAR5=$(cat /etc/pacman.d/mirrorlist | grep https://syd.mirror.rackspace.com/archlinux/\\$\repo/os/\\$\arch)
#@	if	[ -z "$SECTION3VAR5" ]
#@	then
#@		clear ; echo "Error detected at section 3 - Command 5" ; exit
#@	fi
#@fi

#################### Section 4.0 (Download Latest Arch Linux Packages) ####################

#@pacman -Syyy
#@echo " "
#@echo "Latest Arch Linux Packages have been downloaded successfully "
#@echo " "
#@sleep 2s

#################### Section 5.0 (Install Expect Shell) ####################

#@printf '\n\n\n' | pacman -Syy expect
#@echo " "
#@echo "Expect Shell has been installed successfully "
#@echo " "
#@sleep 2s

#################### Section 6.0 (Setup HDD Partitions for Installation) ####################

### First Classification Option
#@#if		[ "$CLASSIFICATION" = "CLASS1" ]
#@#then
#@	echo "label: gpt" > partition-table
#@	echo "device: /dev/sda" >> partition-table
#@	echo "unit: sectors" >> partition-table
#@	echo "first-lba: 2048" >> partition-table
#@	echo "last-lba: 1000215182" >> partition-table
#@	echo " " >> partition-table
#@	echo "/dev/sda1 : start=           2048, size=     2097152, type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B"   >> partition-table
#@	echo "/dev/sda2 : start=        2099200, size=     2097152, type=0FC63DAF-8483-4772-8E79-3D69D8477DE4"   >> partition-table
#@	echo "/dev/sda3 : start=        4196352, size=   996018831, type=E6D6D379-F507-44C2-A23C-238F2A3DF928" >> partition-table
#@	SECTION6VAR1=$(ls ~ | grep -w partition-table)
#@	if	[ ! -z "$SECTION6VAR1" ]
#@	then
#@		echo "Partition Table file has been created successfully"
#@	else
#@		clear ; echo "Error detected at section 6 - Command 1" ; exit
#@	fi
#@fi

### Second Classification Option
#@#if		[ "$CLASSIFICATION" = "CLASS2" ]
#@#then
#@	echo "label: gpt" > partition-table
#@	echo "device: /dev/sda" >> partition-table
#@	echo "unit: sectors" >> partition-table
#@	echo "first-lba: 2048" >> partition-table
#@	echo "last-lba: 1000215182" >> partition-table
#@	echo " " >> partition-table
#@	echo "/dev/sda1 : start=           2048, size=     2097152, type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B"   >> partition-table
#@	echo "/dev/sda2 : start=        2099200, size=     2097152, type=0FC63DAF-8483-4772-8E79-3D69D8477DE4"   >> partition-table
#@	echo "/dev/sda3 : start=        4196352, size=   996018831, type=E6D6D379-F507-44C2-A23C-238F2A3DF928" >> partition-table
#@	SECTION6VAR2=$(ls ~ | grep -w partition-table)
#@	if	[ ! -z "$SECTION6VAR2" ]
#@	then
#@		echo "Partition Table file has been created successfully"
#@	else
#@		clear ; echo "Error detected at section 6 - Command 2" ; exit
#@	fi
#@fi
### Third Classification Option
#@#if		[ "$CLASSIFICATION" = "CLASS3" ]
#@#then
#@	echo "label: gpt" > partition-table
#@	echo "device: /dev/sda" >> partition-table
#@	echo "unit: sectors" >> partition-table
#@	echo "first-lba: 2048" >> partition-table
#@	echo "last-lba: 1000215182" >> partition-table
#@	echo " " >> partition-table
#@	echo "/dev/sda1 : start=           2048, size=     2097152, type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B"   >> partition-table
#@	echo "/dev/sda2 : start=        2099200, size=     2097152, type=0FC63DAF-8483-4772-8E79-3D69D8477DE4"   >> partition-table
#@	echo "/dev/sda3 : start=        4196352, size=   996018831, type=E6D6D379-F507-44C2-A23C-238F2A3DF928" >> partition-table
#@	SECTION6VAR3=$(ls ~ | grep -w partition-table)
#@	if	[ ! -z "$SECTION6VAR3" ]
#@	then
#@		echo "Partition Table file has been created successfully"
#@	else
#@		clear ; echo "Error detected at section 6 - Command 3" ; exit
#@	fi
#@fi
#@sfdisk /dev/sda < partition-table
#@SECTION6VAR4=$(fdisk -l | grep /dev/sda1)
#@SECTION6VAR5=$(fdisk -l | grep /dev/sda2)
#@SECTION6VAR6=$(fdisk -l | grep /dev/sda3)
#@if 	[ "$SECTION6VAR4" = "/dev/sda1     2048    2099199   2097152    1G EFI System" ] 	&& 
#@	[ "$SECTION6VAR5" = "/dev/sda2  2099200    4196351   2097152    1G Linux filesystem" ]  && 
#@	[ "$SECTION6VAR6" = "/dev/sda3  4196352 1000215182 996018831  475G Linux LVM" ]	;
#@then
#@	echo "Harddrive partitions have been setup successfully" ; sleep 2s
#@else
#@	clear ; echo "Error detected at section 6 - Command 4" ; exit

#@rm partition-table


#################### Section 7.0 (Format SDA1 EFI Boot Partition) ####################

#SECTION7VAR1=$(file -sL /dev/sda1 | grep FAT\ \(32\ bit\))
#if	[ ! -z "$SECTION7VAR1" ]
#then
#	echo "EFI Boot Partition has been formatted to Fat32 successfully"
#else
#	mkfs.fat -F32 /dev/sda1
#	SECTION7VAR1=$(file -sL /dev/sda1 | grep FAT\ \(32\ bit\))
#	if	[ ! -z "$SECTION7VAR1" ]
#	then
#		clear ; echo "Error detected at section 7 - Command 1" ; exit
#	fi
#fi

##################### Section 8.0 (Format SDA2 Boot Partition) ####################

#@SECTION8VAR1=$(file -sL /dev/sda2 | grep ext4\ filesystem)
#@if	[ ! -z "$SECTION8VAR1" ]
#@then
#@	echo "Linux Boot Partition has been formatted to Ext4 successfully"
#@else
#@	printf 'y\n' | mkfs.ext4 /dev/sda2
#@	SECTION8VAR1=$(file -sL /dev/sda2 | grep ext4\ filesystem)
#@	if	[ ! -z "$SECTION8VAR1" ]
#@	then
#@		clear ; echo "Error detected at section 8 - Command 1" ; exit
#@	fi
#@fi

#################### Section 9.0 (Setup of SDA 3 LUKS Partition Encrypted Container) ####################

#@echo "#!/usr/bin/expect -f" > expectfile
#@echo "set send_slow {2 0.5}" >> expectfile
#@echo "spawn cryptsetup luksFormat /dev/sda3" >> expectfile
#@echo "expect \"Are you sure? (Type 'yes' in capital letters):\\r\"" >> expectfile
#@echo "send -s \"YES\\r\"" >> expectfile
#@echo "expect \"Enter passphrase for /dev/sda3:\\r\"" >> expectfile
#@echo "send -s \"$LUKSPASSPHRASE\\r\"" >> expectfile
#@echo "expect \"Verify passphrase:\\r\"" >> expectfile
#@echo "send -s \"$LUKSPASSPHRASE\\r\"" >> expectfile
#@echo "interact" >> expectfile
#@chmod 777 expectfile
#@SECTION9VAR1=$(ls ~ | grep -w expectfile)
#@if	[ ! -z "$SECTION9VAR1" ]
#@then
#@	echo "Expect file has been created successfully"
#@else
#@	clear ; echo "Error detected at section 9 - Command 1" ; exit
#@fi

######## Up to here for validations

#@expect expectfile
#@sleep 5s
#@rm expectfile
#@echo " "
#@echo "LUKS Encrypted Container has been setup successfully "
#@echo " "
#@sleep 2s

#################### Section 10.0 (Open LUKS Container) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@printf '%s\n' "$LUKSPASSPHRASE" | cryptsetup open --type luks /dev/sda3 lvm
#@echo " "
#@echo "LUKS Container has been opened with the provided passphrase successfully "
#@echo " "
#@sleep 2s

#################### Section 11.0 (Setup Physical Volume) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@pvcreate --dataalignment 1m /dev/mapper/lvm
#@echo " "
#@echo "LUKS Physical volume has been setup successfully "
#@echo " "
#@sleep 2s

#################### Section 12.0 (Setup Virtual Volume Group) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@vgcreate volgroup0 /dev/mapper/lvm
#@echo " "
#@echo "LVM Volume Group has been setup successfully "
#@echo " "
#@sleep 2s

#################### Section 13.0 (Setup Live Volumes for LUKS Encrypted Drive) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@lvcreate -L 50GB volgroup0 -n lv_root
#@echo " "
#@echo "LVM Root Volume has been setup successfully "
#@echo " "
#@sleep 2s

###lvcreate -L 350GB volgroup0 -n lv_home

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@lvcreate -l 100%FREE volgroup0 -n lv_home
#@echo " "
#@echo "LVM Home Volume has been setup successfully "
#@echo " "
#@sleep 2s

#################### Section 14.0 (Create Root Filesystem for LUKS encrypted drive) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@mkfs.ext4 /dev/volgroup0/lv_root
#@echo " "
#@echo "LVM Root Volume has been formatted to Ext4 successfully "
#@echo " "
#@sleep 2s

#################### Section 15.0 (Create Home Filesystem for LUKS encrypted drive) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@mkfs.ext4 /dev/volgroup0/lv_home
#@echo " "
#@echo "LVM Home Volume has been formatted to Ext4 successfully "
#@echo " "
#@sleep 2s

#################### Section 16.0 (Mount Home and Boot Volumes) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@mount /dev/volgroup0/lv_root /mnt
#@echo " "
#@echo "LVM Root Volume mounted to /mnt successfully "
#@echo " "
#@sleep 2s

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@mkdir /mnt/home
#@echo " "
#@echo "Home Directory created successfully "
#@echo " "
#@sleep 2s

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@mount /dev/volgroup0/lv_home /mnt/home
#@echo " "
#@echo "LVM Home Volume mounted to /mnt successfully "
#@echo " "
#@sleep 2s

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@mkdir /mnt/boot
#@echo " "
#@echo "Boot Directory created successfully "
#@echo " "
#@sleep 2s

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@mount /dev/sda2 /mnt/boot
#@echo " "
#@echo "Linux Boot Partition mounted to /mnt/boot successfully "
#@echo " "
#@sleep 2s

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@mkdir /mnt/etc
#@echo " "
#@echo "/mnt/etc Directory created successfully "
#@echo " "
#@sleep 2s

#################### Section 17.0 (Configures Filesystem Table for Boot) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@genfstab -U -p /mnt >> /mnt/etc/fstab
#@echo " "
#@echo "fstab file has been generated successfully "
#@echo " "
#@sleep 2s

#################### Section 18.0 (Download Base Arch Linux into Mount location) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@printf '\n\n\n' | pacstrap -i /mnt base
#@echo " "
#@echo "Base Arch Linux System has been downloaded into the bootup location successfully "
#@echo " "
#@sleep 2s

#################### Section 19.0 (Install Linux LTS Version to CHROOT) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@printf '\n\n\n' | arch-chroot /mnt pacman -S linux-lts linux-lts-headers
#@echo " "
#@echo "Linux LTS and Headers have been downloaded and installed into the bootup location successfully "
#@echo " "
#@sleep 2s

#################### Section 20.0 (Install Linux Firmware to CHROOT) ####################

###note need to install firmware (aic94xx;wd719x) most likely from Arch Linux AUR

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@printf '\n\n\n' | arch-chroot /mnt pacman -S linux-firmware
#@echo " "
#@echo "Linux Firmware files have been downloaded and installed successfully "
#@echo " "
#@sleep 2s

#################### Section 21.0 (Install Text Editor Packages to CHROOT) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@printf '\n\n\n' | arch-chroot /mnt pacman -S nano vim
#@echo " "
#@echo "Text Editor Software has been downloaded and installed successfully "
#@echo " "
#@sleep 2s

#################### Section 22.0 (Install Base Developer Packages and SSH to CHROOT) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@printf '\n\n\n' | arch-chroot /mnt pacman -S base-devel openssh
#@echo " "
#@echo "Linux Base Devel and OpenSSH has been downloaded and installed successfully "
#@echo " "
#@sleep 2s

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@arch-chroot /mnt systemctl enable sshd
#@echo " "
#@echo "SSH has been enabled successfully "
#@echo " "
#@sleep 2s

#################### Section 23.0 (Install Networking Utility Packages to CHROOT) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@printf '\n\n\n' | arch-chroot /mnt pacman -S networkmanager wpa_supplicant wireless_tools netctl
#@echo " "
#@echo "NetworkManager, WPA_Supplicant, Wireless_Tools and Netctl Software Packages have been downloaded and installed successfully "
#@echo " "
#@sleep 2s

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@arch-chroot /mnt systemctl enable NetworkManager
#@echo " "
#@echo "Network Manager has been enabled successfully "
#@echo " "
#@sleep 2s

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@arch-chroot /mnt systemctl enable dhcpcd
#@echo " "
#@echo "DHCP Service has been enabled successfully "
#@echo " "
#@sleep 2s

#################### Section 24.0 (Install Dialog to CHROOT) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@printf '\n\n\n' | arch-chroot /mnt pacman -S dialog
#@echo " "
#@echo "Dialog has been downloaded and installed successfully "
#@echo " "
#@sleep 2s

#################### Section 25.0 (Install LVM2 Packages to CHROOT) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@printf '\n\n\n' | arch-chroot /mnt pacman -S lvm2
#@echo " "
#@echo "LVM2 Software has been downloaded and installed successfully "
#@echo " "
#@sleep 2s

#################### Section 26.0 (Enable Encryption and LVM2 functionality to CHROOT) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@arch-chroot /mnt sed -i "s/block/block encrypt lvm2/" /etc/mkinitcpio.conf
#@echo " "
#@echo "LVM Encryption has been configured ready for first bootup successfully "
#@echo " "
#@sleep 2s

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@arch-chroot /mnt mkinitcpio -p linux-lts
#@echo " "
#@echo "Linux LTS System has been initilaized successfully "
#@echo " "
#@sleep 2s

#################### Section 27.0 (Configure Language and Locale Settings) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@arch-chroot /mnt sed -i "s/#en_AU.UTF-8/en_AU.UTF-8/" /etc/locale.gen
#@echo " "
#@echo "Australian Location Settings have been enabled successfully "
#@echo " "
#@sleep 2s

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@arch-chroot /mnt locale-gen
#@echo " "
#@echo "Location configuration has been generated successfully "
#@echo " "
#@sleep 2s

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@echo "LANG=en_AU.UTF-8" > /mnt/etc/locale.conf
#@echo " "
#@echo "Australian English Language settings have been configured successfully "
#@echo " "
#@sleep 2s

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@cp /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist
#@echo " "
#@echo "Mirrolist file has been configured ready for first bootup successfully "
#@echo " "
#@sleep 2s

#################### Section 28.0 (Configure Hostname) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@echo "$CLASSIFICATION$HOSTNAME" > /mnt/etc/hostname
#@echo " "
#@echo "Hostname has been configured successfully "
#@echo " "
#@sleep 2s

#################### Section 29.0 (Configure Hosts File) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@echo "127.0.0.1  localhost" >> /mnt/etc/hosts

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@echo "::1  localhost" >> /mnt/etc/hosts

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@echo "127.0.1.1  $CLASSIFICATION$HOSTNAME.localdomain $CLASSIFICATION$HOSTNAME" >> /mnt/etc/hosts
#@echo " "
#@echo "Host file has been configured successfully "
#@echo " "
#@sleep 2s

#################### Section 30.0 (Install Sudo and Setup Root Level Password) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@printf '\n\n\n' | arch-chroot /mnt pacman -S sudo
#@echo " "
#@echo "Sudo Software package has been downloaded and installed successfully "
#@echo " "
#@sleep 2s

#@printf "$ROOTPASSWORD\n$ROOTPASSWORD" | arch-chroot /mnt passwd
#@echo " "
#@echo "Root User Password has been set successfully "
#@echo " "
#@sleep 2s

#################### Section 31.0 (Setup Users and Groups) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@arch-chroot /mnt useradd -m -g users -G wheel $A_USERNAME_1
#@echo " "
#@echo "Administrator Account has been created successfully "
#@echo " "
#@sleep 2s

#@printf "$A_USERPASSWORD_1\n$A_USERPASSWORD_1" | arch-chroot /mnt passwd $A_USERNAME_1
#@echo " "
#@echo "Administrator Account Password has been set successfully "
#@echo " "
#@sleep 2s

#################### Section 32.0 (Enable Wheel Group) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@sudo sed -i 's/^#\s*\(%wheel\s\+ALL=(ALL)\s\+ALL\)/\1/' /etc/sudoers
#@echo " "
#@echo "Sudo Wheel Group Sudo rights have been enabled successfully "
#@echo " "
#@sleep 2s

#################### Section 33.0 (Download GRUB Bootloader Software Packages) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@printf '\n\n\n' | arch-chroot /mnt pacman -S grub efibootmgr dosfstools os-prober mtools
#@echo " "
#@echo "GRUB Bootloader Software packages have been downloaded and installed successfully "
#@echo " "
#@sleep 2s

#################### Section 34.0 (Configure Encryption GRUB Boot) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@arch-chroot /mnt sed -i "s/#GRUB_ENABLE_CRYPTODISK=y/GRUB_ENABLE_CRYPTODISK=y/" /etc/default/grub

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@arch-chroot /mnt sed -i "s/GRUB_CMDLINE_LINUX_DEFAULT=\"loglevel=3 quiet\"/GRUB_CMDLINE_LINUX_DEFAULT=\"loglevel=3 cryptdevice=\/dev\/sda3:volgroup0:allow-discards quiet\"/" /etc/default/grub
#@echo " "
#@echo "Grub Boot Settings have been configured successfully "
#@echo " "
#@sleep 2s

#################### Section 35.0 (Setup and Enable EFI Booting) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@arch-chroot /mnt mkdir /boot/EFI
#@echo " "
#@echo "EFI bootup directory has been created successfully "
#@echo " "
#@sleep 2s

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@arch-chroot /mnt mount /dev/sda1 /boot/EFI
#@echo " "
#@echo "EFI boot partition has been mounted successfully "
#@echo " "
#@sleep 2s

#################### Section 36.0 (Install GRUB Bootloader) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@arch-chroot /mnt grub-install --target=x86_64-efi --bootloader-id=grub_uefi --recheck
#@echo " "
#@echo "Grub boot loader has been installed ready for bootup successfully "
#@echo " "
#@sleep 2s

#################### Section 37.0 (Setup and Enable Location Settings for Boot) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@arch-chroot /mnt mkdir /boot/grub/locale
#@echo " "
#@echo "Grub locale file has been created successfully "
#@echo " "
#@sleep 2s

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@arch-chroot /mnt cp /usr/share/locale/en\@quot/LC_MESSAGES/grub.mo /boot/grub/locale/en.mo
#@echo " "
#@echo "Grub English locale settings have been setup successfully "
#@echo " "
#@sleep 2s

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
#@echo " "
#@echo "Grub configuration file has been generated successfully "
#@echo " "
#@sleep 2s

#@#################### Section 38.0 (Create and Setup Swapfile) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@arch-chroot /mnt fallocate -l 4G /swapfile
#@echo " "
#@echo "Harddrive space has been allocated for swapfile successfully "
#@echo " "
#@sleep 2s

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@arch-chroot /mnt chmod 600 /swapfile
#@echo " "
#@echo "Swapfile permissions have been configured successfully "
#@echo " "
#@sleep 2s

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@arch-chroot /mnt mkswap /swapfile
#@echo " "
#@echo "Swapfile has been enabled successfully "
#@echo " "
#@sleep 2s

#################### Section 39.0 (Backup FSTAB file) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@arch-chroot /mnt cp /etc/fstab /etc/fstab.bak
#@echo " "
#@echo "fstab backup file has been created successfully "
#@echo " "
#@sleep 2s

#################### Section 40.0 (Setup Swapfile Boot Configuration) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@echo '/swapfile none swap sw 0 0' >> /mnt/etc/fstab
#@echo " "
#@echo "swapfile settings have been enabled in fstab successfully "
#@echo " "
#@sleep 2s

#################### Section 41.0 (Install Intel Software Packages) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@printf '\n\n\n' | arch-chroot /mnt pacman -S intel-ucode
#@echo " "
#@echo "Intel Software has been downloaded and installed successfully "
#@echo " "
#@sleep 2s

#################### Section 42.0 (Install GUI Base Software) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@printf '\n\n\n' |  arch-chroot /mnt pacman -S xorg xorg-server
#@echo " "
#@echo "GUI Software has been downloaded and installed successfully "
#@echo " "
#@sleep 2s

#################### Section 43.0 (Install MESA Package) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@printf '\n\n\n' |  arch-chroot /mnt pacman -S mesa
#@echo " "
#@echo "mesa software has been downloaded and installed successfully "
#@echo " "
#@sleep 2s

#################### Section 44.0 (Install GNOME Desktop and Configuration for Boot) ####################

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@printf '\n\n\n\n\n\n\n\n' | arch-chroot /mnt pacman -S gnome gnome-extra
#@echo " "
#@echo "GNOME GUI has been downloaded and installed successfully "
#@echo " "
#@sleep 2s

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@arch-chroot /mnt systemctl start gdm.service
#@echo " "
#@echo "GNOME GUI Service has been started successfully "
#@echo " "
#@sleep 2s

#@if	[  ] has been done
#@then	echo it has been done
#@else
#@	do it command
#@	if	[  ] hasn't been done after that
#@	then	display error. refer to section blah
#@	fi
#@fi

#@arch-chroot /mnt systemctl enable gdm.service
#@echo " "
#@echo "GNOME GUI Service has been enabled successfully "
#@echo " "
#@sleep 2s

#################### Section 45.0 (Unmount All prior to reboot) ####################

#@umount -a
#@echo " "
#@echo "Attempted to unmount all drives ready for system shutdown "
#@echo " "
#@sleep 2s
#@clear

#################### Section 46.0 (Power Off and Remove USB) ####################

#@echo "Installation Complete. Poweroff the System. Unplug the bootable USB and set boot device EFI / GRUB in bios"
### press any key to Shut Down.

######################################## END OF SCRIPT ########################################
